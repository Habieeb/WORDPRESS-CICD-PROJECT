name: Pull, Push, and Deploy with Docker Compose

on:
  push:
    branches:
      - main

jobs:
  pull-push-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull WordPress base image
        run: |
          docker pull wordpress:latest

      - name: Tag WordPress image
        run: |
          docker tag wordpress:latest ${{ secrets.DOCKER_USERNAME }}/wordpress:latest

      - name: Push WordPress image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/wordpress:latest

      - name: Pull MySQL image
        run: |
          docker pull mysql:5.7

      - name: Tag MySQL image
        run: |
          docker tag mysql:5.7 ${{ secrets.DOCKER_USERNAME }}/mysql:5.7

      - name: Push MySQL image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/mysql:5.7

      - name: Deploy to EC2 with Docker Compose
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          # Create the .ssh directory if it doesn't exist
          mkdir -p ~/.ssh
          
          # Create the SSH key file
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add the host to known_hosts to prevent host key verification issues
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
          
          # SSH into the EC2 instance and execute commands
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@$EC2_HOST << 'EOF'
            # Ensure Docker and Docker Compose are installed and running
            sudo systemctl status docker || sudo systemctl start docker
            
            # Navigate to the directory where your docker-compose.yml is located
            cd /path/to/your/docker-compose-directory
            
            # Pull the latest images from Docker Hub
            sudo docker-compose pull
            
            # Restart the services with the latest images
            sudo docker-compose up -d
            
            # Optional: Check the status of the containers
            sudo docker-compose ps
          EOF
